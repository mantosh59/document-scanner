{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAmBA,MAAM,CAAN,IAAY,YAUX;AAVD,WAAY,YAAY;IACtB;;OAEG;IACH,iCAAiB,CAAA;IAEjB;;OAEG;IACH,+CAA+B,CAAA;AACjC,CAAC,EAVW,YAAY,KAAZ,YAAY,QAUvB;AAgBD,MAAM,CAAN,IAAY,0BAYX;AAZD,WAAY,0BAA0B;IACpC;;;OAGG;IACH,iDAAmB,CAAA;IAEnB;;;OAGG;IACH,+CAAiB,CAAA;AACnB,CAAC,EAZW,0BAA0B,KAA1B,0BAA0B,QAYrC","sourcesContent":["export interface EGDocScannerPlugin {\n  scanDocument(options: ScanDocumentOptions): Promise<ScanDocumentResponse>\n}\n\nexport interface ScanDocumentOptions {\n  /**\n   * Android only: The maximum number of photos an user can take (not counting photo retakes)\n   * @default: 4\n   */\n  maxNumDocuments?: number\n\n  /**\n   * The response comes back in this format on success. It can be the document\n   * scan image file paths or base64 images.\n   * @default: ResponseType.ImageFilePath\n   */\n  responseType?: ResponseType\n}\n\nexport enum ResponseType {\n  /**\n   * Use this response type if you want document scan returned as base64 images.\n   */\n  Base64 = 'base64',\n\n  /**\n   * Use this response type if you want document scan returned as inmage file paths.\n   */\n  ImageFilePath = 'imageFilePath'\n}\n\nexport interface ScanDocumentResponse {\n  /**\n   * This is an array with either file paths or base64 images for the\n   * document scan.\n   */\n  scannedFiles?: string\n\n  /**\n   * The status lets you know if the document scan completes successfully,\n   * or if the user cancels before completing the document scan.\n   */\n  status?: ScanDocumentResponseStatus\n}\n\nexport enum ScanDocumentResponseStatus {\n  /**\n   * The status comes back as success if the document scan completes\n   * successfully.\n   */\n  Success = 'success',\n\n  /**\n   * The status comes back as cancel if the user closes out of the camera\n   * before completing the document scan.\n   */\n  Cancel = 'cancel'\n}\n"]}